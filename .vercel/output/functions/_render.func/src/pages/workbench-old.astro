---
import Layout from '@/layouts/Layout.astro'
import { getWorkbenchArticles } from '@/lib/supabase'

// 从URL参数获取筛选条件
const url = Astro.url
const status = url.searchParams.getAll('status')
const category = url.searchParams.get('category')
const sort_by = url.searchParams.get('sort_by') || 'created_at'
const sort_order = url.searchParams.get('sort_order') || 'desc'

const filters = {
  status: status.length > 0 ? status : ['adopted'],
  category: category || undefined,
  sort_by: sort_by as 'created_at' | 'value_score',
  sort_order: sort_order as 'asc' | 'desc'
}

const { data: articles, error } = await getWorkbenchArticles(filters)

if (error) {
  console.error('获取工作台文章失败:', error)
}

// 获取RSS分类
const { data: categories } = await supabase
  .from('rss_sources')
  .select('category')
  .eq('is_active', true)

const uniqueCategories = [...new Set(categories?.map(c => c.category) || [])]
---

<Layout title="工作台 - 制造业情报系统">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    
    <!-- 工作台标题 -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">✏️ 编辑台</h1>
      <p class="mt-2 text-gray-600">使用 Doocs MD 编辑器进行文章编译和发布</p>
    </div>

    <!-- 筛选面板 -->
    <div class="bg-white shadow rounded-lg mb-6 p-6">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        
        <!-- 状态筛选 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">状态</label>
          <select id="status-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
            <option value="adopted">已采用</option>
            <option value="compiled">已编译</option>
            <option value="all">全部</option>
          </select>
        </div>

        <!-- 主题筛选 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">主题</label>
          <select id="category-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
            <option value="all">全部主题</option>
            {uniqueCategories.map(category => (
              <option value={category}>{category}</option>
            ))}
          </select>
        </div>

        <!-- 排序方式 -->
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">排序</label>
          <select id="sort-filter" class="w-full px-3 py-2 border border-gray-300 rounded-md text-sm">
            <option value="created_at_desc">最新优先</option>
            <option value="value_score_desc">评分优先</option>
            <option value="created_at_asc">最旧优先</option>
          </select>
        </div>

        <!-- 操作按钮 -->
        <div class="flex items-end">
          <button id="apply-filters" class="w-full px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
            应用筛选
          </button>
        </div>
      </div>
    </div>

    <!-- 文章列表 -->
    <div class="space-y-4" id="workbench-articles">
      {articles?.map(article => (
        <div class="bg-white rounded-lg shadow-md p-6">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <h3 class="font-semibold text-lg mb-2">{article.raw_content?.headline || '无标题'}</h3>
              <p class="text-gray-600 text-sm mb-3">
                {article.ai_translation ? article.ai_translation.substring(0, 200) + '...' : '暂无翻译'}
              </p>
              <div class="flex items-center space-x-3 text-xs text-gray-500">
                <span>评分: {article.value_score}/10</span>
                <span>状态: {article.status}</span>
                <span>{new Date(article.created_at).toLocaleString('zh-CN')}</span>
              </div>
            </div>
            <div class="ml-4 flex flex-col space-y-2">
              <button 
                onclick={`editArticle('${article.id}')`}
                class="px-4 py-2 bg-blue-500 text-white text-sm rounded hover:bg-blue-600"
              >
                编辑
              </button>
              {article.status === 'adopted' && (
                <button 
                  onclick={`markCompiled('${article.id}')`}
                  class="px-4 py-2 bg-green-500 text-white text-sm rounded hover:bg-green-600"
                >
                  标记已编译
                </button>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>

    {(!articles || articles.length === 0) && (
      <div class="text-center py-12">
        <p class="text-gray-500">暂无符合条件的文章</p>
      </div>
    )}
  </div>

  <!-- 编辑器模态框 -->
  <div id="editor-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center h-full p-4">
      <div class="bg-white rounded-lg w-full max-w-6xl h-5/6 flex flex-col">
        <div class="flex items-center justify-between p-4 border-b">
          <h2 class="text-lg font-semibold">文章编辑器</h2>
          <div class="flex items-center space-x-2">
            <button id="sync-content" class="px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600">
              同步内容
            </button>
            <button id="save-article" class="px-3 py-1 bg-green-500 text-white text-sm rounded hover:bg-green-600">
              保存
            </button>
            <button onclick="closeEditor()" class="px-3 py-1 bg-gray-500 text-white text-sm rounded hover:bg-gray-600">
              关闭
            </button>
          </div>
        </div>
        <div class="flex-1">
          <iframe id="editor-iframe" src="/doocs-editor.html" class="w-full h-full border-0"></iframe>
        </div>
        <textarea id="hidden-content" class="hidden"></textarea>
      </div>
    </div>
  </div>

  <script>
    let currentArticleId = null
    
    async function editArticle(id) {
      currentArticleId = id
      
      try {
        const response = await fetch(`/api/articles/${id}`)
        const data = await response.json()
        
        if (data.success) {
          const article = data.data
          const content = article.final_content || article.ai_translation || ''
          
          // 显示编辑器
          document.getElementById('editor-modal').classList.remove('hidden')
          
          // 等待iframe加载
          const iframe = document.getElementById('editor-iframe')
          iframe.onload = function() {
            // 发送内容到编辑器
            iframe.contentWindow.postMessage({
              source: 'parent',
              action: 'setContent',
              data: content
            }, '*')
          }
        }
      } catch (error) {
        console.error('加载文章失败:', error)
      }
    }
    
    function closeEditor() {
      document.getElementById('editor-modal').classList.add('hidden')
      currentArticleId = null
    }
    
    async function syncContent() {
      const iframe = document.getElementById('editor-iframe')
      iframe.contentWindow.postMessage({
        source: 'parent',
        action: 'getContent'
      }, '*')
    }
    
    async function saveArticle() {
      if (!currentArticleId) return
      
      const content = document.getElementById('hidden-content').value
      
      try {
        const response = await fetch('/api/articles/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            id: currentArticleId,
            final_content: content,
            status: 'compiled',
            editor_action: 'compiled'
          })
        })
        
        if (response.ok) {
          alert('保存成功！')
          closeEditor()
          location.reload()
        }
      } catch (error) {
        console.error('保存失败:', error)
        alert('保存失败')
      }
    }
    
    // 监听编辑器消息
    window.addEventListener('message', (event) => {
      if (event.data.source === 'doocs-editor') {
        if (event.data.action === 'contentResponse') {
          document.getElementById('hidden-content').value = event.data.data
          alert('内容已同步')
        }
      }
    })
    
    // 筛选功能
    document.getElementById('apply-filters').addEventListener('click', () => {
      const status = document.getElementById('status-filter').value
      const category = document.getElementById('category-filter').value
      const sort = document.getElementById('sort-filter').value
      
      const params = new URLSearchParams()
      if (status !== 'all') params.append('status', status)
      if (category !== 'all') params.append('category', category)
      
      const [sortBy, sortOrder] = sort.split('_')
      params.append('sort_by', sortBy)
      params.append('sort_order', sortOrder)
      
      window.location.href = `/workbench?${params.toString()}`
    })
    
    async function markCompiled(id) {
      try {
        const response = await fetch('/api/articles/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            id, 
            status: 'compiled', 
            editor_action: 'compiled' 
          })
        })
        
        if (response.ok) {
          location.reload()
        }
      } catch (error) {
        console.error('标记编译失败:', error)
      }
    }
    
    // 绑定到window以供onclick使用
    window.editArticle = editArticle
    window.markCompiled = markCompiled
    window.closeEditor = closeEditor
    window.syncContent = syncContent
    window.saveArticle = saveArticle
  </script>
</Layout>